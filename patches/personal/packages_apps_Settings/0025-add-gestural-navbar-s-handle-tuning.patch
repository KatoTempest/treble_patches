From 0a1b3f404e490c6932db151c7db6fde1d2272c09 Mon Sep 17 00:00:00 2001
From: Victor Bo <bvoid@yandex.ru>
Date: Mon, 16 Nov 2020 05:42:57 -0500
Subject: [PATCH 25/32] add gestural navbar's handle tuning

  based on
  https://github.com/StatiXOS/android_packages_apps_Settings/commit/3346cb7276465d6a33075fe75433689dc6274148

Change-Id: I91a14d1946eff66d731f1e85b874f2020c465348
---
 res/values-ru/strings.xml                     |   4 +
 res/values/strings.xml                        |   7 +-
 res/xml/gesture_navigation_settings.xml       |  14 ++-
 .../GestureNavigationSettingsFragment.java    | 119 ++++++++++++++----
 4 files changed, 114 insertions(+), 30 deletions(-)

diff --git a/res/values-ru/strings.xml b/res/values-ru/strings.xml
index 949a3223ca..c64adcaed0 100644
--- a/res/values-ru/strings.xml
+++ b/res/values-ru/strings.xml
@@ -5146,6 +5146,10 @@
     <string name="custom_systemui_tuner_summary">Открыть настройки старого SystemUI тюнера</string>
     <!-- Screenshot shutter -->
     <string name="screenshot_shutter_sound_title">Звук снимка экрана</string>
+    <!-- Gesture Navbar tuning -->
+    <string name="gesture_handle_title">Полоса жестов</string>
+    <string name="hide_label">Скрыть</string>
+    <string name="def_label">Обычная</string>
 
     <string name="media_output_panel_stop_casting_button" msgid="6094875883164119035">"Прекратить трансляцию"</string>
     <string name="volte_5G_limited_title" msgid="5908052268836750629">"Отключить VoLTE?"</string>
diff --git a/res/values/strings.xml b/res/values/strings.xml
index 9e6495b991..587ac4d002 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -12186,7 +12186,12 @@
 
     <!-- Screenshot shutter -->
     <string name="screenshot_shutter_sound_title">Screenshot sound</string>
- 
+
+    <!-- Gesture Navbar tuning -->
+    <string name="gesture_handle_title">Gesture handle</string>
+    <string name="hide_label">Hide</string>
+    <string name="def_label">Normal</string>
+
     <!-- Title for media control settings [CHAR LIMIT=50]-->
     <string name="media_controls_title">Media</string>
     <!-- Summary for media control settings [CHAR LIMIT=60]-->
diff --git a/res/xml/gesture_navigation_settings.xml b/res/xml/gesture_navigation_settings.xml
index 623005400f..fe670da04e 100644
--- a/res/xml/gesture_navigation_settings.xml
+++ b/res/xml/gesture_navigation_settings.xml
@@ -45,11 +45,13 @@
             settings:textEnd="@string/high_label"/>
     </PreferenceCategory>
 
-    <com.android.settingslib.widget.FooterPreference
-        android:key="gesture_navigation_settings_footer"
-        android:title="@string/back_sensitivity_dialog_message"
-        android:selectable="false"
-        settings:searchable="false"
-        settings:allowDividerAbove="true"/>
+    <com.android.settings.widget.LabeledSeekBarPreference
+        android:key="gesture_navbar_tuning"
+        android:title="@string/gesture_handle_title"
+        android:max="3"
+        android:selectable="true"
+        settings:textStart="@string/def_label"
+        settings:textEnd="@string/hide_label"/>
+
 </PreferenceScreen>
 
diff --git a/src/com/android/settings/gestures/GestureNavigationSettingsFragment.java b/src/com/android/settings/gestures/GestureNavigationSettingsFragment.java
index 95f4daa4c6..25a35a410d 100644
--- a/src/com/android/settings/gestures/GestureNavigationSettingsFragment.java
+++ b/src/com/android/settings/gestures/GestureNavigationSettingsFragment.java
@@ -16,11 +16,16 @@
 
 package com.android.settings.gestures;
 
+import static android.os.UserHandle.USER_CURRENT;
+
 import android.app.settings.SettingsEnums;
 import android.content.Context;
+import android.content.om.IOverlayManager;
 import android.content.res.Resources;
 import android.content.res.TypedArray;
 import android.os.Bundle;
+import android.os.RemoteException;
+import android.os.ServiceManager;
 import android.provider.Settings;
 import android.view.WindowManager;
 
@@ -43,6 +48,13 @@ public class GestureNavigationSettingsFragment extends DashboardFragment {
 
     private static final String LEFT_EDGE_SEEKBAR_KEY = "gesture_left_back_sensitivity";
     private static final String RIGHT_EDGE_SEEKBAR_KEY = "gesture_right_back_sensitivity";
+    private static final String GESTURE_NAVBAR_TUNING_KEY = "gesture_navbar_tuning";
+
+    private static final String HIDE_OVERLAY_PKG = "com.android.theme.navbar.hidehandle";
+    private static final String LONG_OVERLAY_PKG = "com.android.theme.navbar.longhandle";
+    private static final String MEDIUM_OVERLAY_PKG = "com.android.theme.navbar.mediumhandle";
+
+    private IOverlayManager mOverlayService;
 
     private WindowManager mWindowManager;
     private BackGestureIndicatorView mIndicatorView;
@@ -60,6 +72,8 @@ public class GestureNavigationSettingsFragment extends DashboardFragment {
 
         mIndicatorView = new BackGestureIndicatorView(getActivity());
         mWindowManager = (WindowManager) getActivity().getSystemService(Context.WINDOW_SERVICE);
+        mOverlayService = IOverlayManager.Stub
+                .asInterface(ServiceManager.getService(Context.OVERLAY_SERVICE));
     }
 
     @Override
@@ -74,6 +88,7 @@ public class GestureNavigationSettingsFragment extends DashboardFragment {
 
         initSeekBarPreference(LEFT_EDGE_SEEKBAR_KEY);
         initSeekBarPreference(RIGHT_EDGE_SEEKBAR_KEY);
+        initSeekBarPreference(GESTURE_NAVBAR_TUNING_KEY);
     }
 
     @Override
@@ -116,36 +131,94 @@ public class GestureNavigationSettingsFragment extends DashboardFragment {
         final LabeledSeekBarPreference pref = getPreferenceScreen().findPreference(key);
         pref.setContinuousUpdates(true);
 
-        final String settingsKey = key == LEFT_EDGE_SEEKBAR_KEY
-                ? Settings.Secure.BACK_GESTURE_INSET_SCALE_LEFT
-                : Settings.Secure.BACK_GESTURE_INSET_SCALE_RIGHT;
-        final float initScale = Settings.Secure.getFloat(
-                getContext().getContentResolver(), settingsKey, 1.0f);
+        String settingsKey;
+
+        switch(key) {
+            case LEFT_EDGE_SEEKBAR_KEY:
+                settingsKey = Settings.Secure.BACK_GESTURE_INSET_SCALE_LEFT;
+                break;
+            case RIGHT_EDGE_SEEKBAR_KEY:
+                settingsKey = Settings.Secure.BACK_GESTURE_INSET_SCALE_RIGHT;
+                break;
+            case GESTURE_NAVBAR_TUNING_KEY:
+                settingsKey = Settings.Secure.GESTURE_NAVBAR_TUNING;
+                break;
+            default:
+                settingsKey = "";
+                break;
+        }
+        float initScale = 0;
+        if (settingsKey != "") {
+            initScale = Settings.Secure.getFloat(
+                  getContext().getContentResolver(), settingsKey, 1.0f);
+        }
 
         // Find the closest value to initScale
         float minDistance = Float.MAX_VALUE;
-        int minDistanceIndex = -1;
-        for (int i = 0; i < mBackGestureInsetScales.length; i++) {
-            float d = Math.abs(mBackGestureInsetScales[i] - initScale);
-            if (d < minDistance) {
-                minDistance = d;
-                minDistanceIndex = i;
+        int minDistanceIndex = key == GESTURE_NAVBAR_TUNING_KEY ? (int) initScale : -1;
+        if (key != GESTURE_NAVBAR_TUNING_KEY) {
+            for (int i = 0; i < mBackGestureInsetScales.length; i++) {
+                float d = Math.abs(mBackGestureInsetScales[i] - initScale);
+                if (d < minDistance) {
+                    minDistance = d;
+                    minDistanceIndex = i;
+                }
             }
         }
+
         pref.setProgress(minDistanceIndex);
 
-        pref.setOnPreferenceChangeListener((p, v) -> {
-            final int width = (int) (mDefaultBackGestureInset * mBackGestureInsetScales[(int) v]);
-            mIndicatorView.setIndicatorWidth(width, key == LEFT_EDGE_SEEKBAR_KEY);
-            return true;
-        });
-
-        pref.setOnPreferenceChangeStopListener((p, v) -> {
-            mIndicatorView.setIndicatorWidth(0, key == LEFT_EDGE_SEEKBAR_KEY);
-            final float scale = mBackGestureInsetScales[(int) v];
-            Settings.Secure.putFloat(getContext().getContentResolver(), settingsKey, scale);
-            return true;
-        });
+        if (key != GESTURE_NAVBAR_TUNING_KEY) {
+            pref.setOnPreferenceChangeListener((p, v) -> {
+                final int width = (int) (mDefaultBackGestureInset * mBackGestureInsetScales[(int) v]);
+                mIndicatorView.setIndicatorWidth(width, key == LEFT_EDGE_SEEKBAR_KEY);
+                return true;
+            });
+
+            pref.setOnPreferenceChangeStopListener((p, v) -> {
+                mIndicatorView.setIndicatorWidth(0, key == LEFT_EDGE_SEEKBAR_KEY);
+                final float scale = mBackGestureInsetScales[(int) v];
+                Settings.Secure.putFloat(getContext().getContentResolver(), settingsKey, scale);
+                return true;
+            });
+        } else {
+            pref.setOnPreferenceChangeListener((p, v) -> {
+                switch((int) v) {
+                    case 0:
+                        try {
+                            mOverlayService.setEnabled(HIDE_OVERLAY_PKG, false, USER_CURRENT);
+                            mOverlayService.setEnabled(LONG_OVERLAY_PKG, false, USER_CURRENT);
+                            mOverlayService.setEnabled(MEDIUM_OVERLAY_PKG, false, USER_CURRENT);
+                        } catch (RemoteException re) {
+                            throw re.rethrowFromSystemServer();
+                        }
+                        break;
+                    case 1:
+                        try {
+                            mOverlayService.setEnabledExclusiveInCategory(MEDIUM_OVERLAY_PKG, USER_CURRENT);
+                        } catch (RemoteException re) {
+                            throw re.rethrowFromSystemServer();
+                        }
+                        break;
+                    case 2:
+                        try {
+                            mOverlayService.setEnabledExclusiveInCategory(LONG_OVERLAY_PKG, USER_CURRENT);
+                        } catch (RemoteException re) {
+                            throw re.rethrowFromSystemServer();
+                        }
+                        break;
+                    case 3:
+                        try {
+                            mOverlayService.setEnabledExclusiveInCategory(HIDE_OVERLAY_PKG, USER_CURRENT);
+                        } catch (RemoteException re) {
+                            throw re.rethrowFromSystemServer();
+                        }
+                        break;
+                }
+                Settings.Secure.putFloat(getContext().getContentResolver(), settingsKey, (int) v);
+                return true;
+            });
+        }
     }
 
     private static float[] getFloatArray(TypedArray array) {
-- 
2.17.1

