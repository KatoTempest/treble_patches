From de6adf48f1d11d246c0b065f8b8b596459552e74 Mon Sep 17 00:00:00 2001
From: Victor Bo <bvoid@yandex.ru>
Date: Wed, 19 May 2021 15:27:50 -0400
Subject: [PATCH 165/169] add PixelPropsUtils v3

  based on
  https://github.com/ProtonAOSP/android_frameworks_base/commit/c5a66dbeefe7c4f212d88768a72f897e69040d31
  https://github.com/PixelExperience/frameworks_base/blob/eleven/core/java/com/android/internal/util/custom/PixelPropsUtils.java

Change-Id: I70380542305ef227b9787aa1131e7bdbd62f1eaa
---
 core/java/android/app/Instrumentation.java | 105 +++++++++++++++++++++
 1 file changed, 105 insertions(+)

diff --git a/core/java/android/app/Instrumentation.java b/core/java/android/app/Instrumentation.java
index 721525d9af9..7b442b71060 100644
--- a/core/java/android/app/Instrumentation.java
+++ b/core/java/android/app/Instrumentation.java
@@ -41,6 +41,7 @@ import android.os.Process;
 import android.os.RemoteException;
 import android.os.ServiceManager;
 import android.os.SystemClock;
+import android.os.SystemProperties;
 import android.os.TestLooperManager;
 import android.os.UserHandle;
 import android.util.AndroidRuntimeException;
@@ -60,8 +61,12 @@ import com.android.internal.content.ReferrerIntent;
 import java.io.File;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.reflect.Field;
 import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
 /**
  * Base class for implementing application instrumentation code.  When running
@@ -90,6 +95,9 @@ public class Instrumentation {
 
     private static final String TAG = "Instrumentation";
 
+    private static final boolean PRODUCT_NEEDS_MODEL_EDIT =
+            SystemProperties.getBoolean("persist.sys.phh.pixelprops", false);
+
     /**
      * @hide
      */
@@ -1157,6 +1165,7 @@ public class Instrumentation {
         Application app = getFactory(context.getPackageName())
                 .instantiateApplication(cl, className);
         app.attach(context);
+        setProps(app);
         return app;
     }
     
@@ -1174,9 +1183,105 @@ public class Instrumentation {
             ClassNotFoundException {
         Application app = (Application)clazz.newInstance();
         app.attach(context);
+        setProps(app);
         return app;
     }
 
+    private static final Map<String, Object> propsToChange;
+    private static final Map<String, Object> propsToChangePixel3XL;
+    private static final boolean DEBUG = false;
+
+    private static final String[] packagesToChange = {
+        "com.breel.wallpapers20",
+        "com.google.android.apps.customization.pixel",
+        "com.google.android.apps.fitness",
+        "com.google.android.apps.photos",
+        "com.google.android.apps.recorder",
+        "com.google.android.apps.subscriptions.red",
+        "com.google.android.apps.tachyon",
+        "com.google.android.apps.turboadapter",
+        "com.google.android.apps.wallpaper.pixel",
+        "com.google.android.as",
+        "com.google.android.dialer",
+        "com.google.android.gms.location.history",
+        "com.google.android.inputmethod.latin",
+        "com.google.android.soundpicker",
+        "com.google.pixel.dynamicwallpapers",
+        "com.google.pixel.livewallpaper",
+        "com.google.android.apps.safetyhub",
+        "com.google.android.apps.turbo",
+        "com.google.android.apps.wallpaper",
+        "com.google.android.apps.maps",
+        "com.google.android.gms",
+        "com.google.android.apps.nexuslauncher"
+    };
+
+    private static final String[] packagesToChangePixel3XL = {
+            "com.google.android.googlequicksearchbox"
+    };
+
+    static {
+        propsToChange = new HashMap<>();
+        propsToChange.put("BRAND", "google");
+        propsToChange.put("MANUFACTURER", "Google");
+        propsToChange.put("DEVICE", "redfin");
+        propsToChange.put("PRODUCT", "redfin");
+        propsToChange.put("MODEL", "Pixel 5");
+        propsToChange.put("FINGERPRINT", "google/redfin/redfin:11/RQ3A.210805.001.A1/7474174:user/release-keys");
+        propsToChangePixel3XL = new HashMap<>();
+        propsToChangePixel3XL.put("BRAND", "google");
+        propsToChangePixel3XL.put("MANUFACTURER", "Google");
+        propsToChangePixel3XL.put("DEVICE", "crosshatch");
+        propsToChangePixel3XL.put("PRODUCT", "crosshatch");
+        propsToChangePixel3XL.put("MODEL", "Pixel 3 XL");
+        propsToChangePixel3XL.put("FINGERPRINT", "google/crosshatch/crosshatch:11/RQ3A.210805.001.A1/7474174:user/release-keys");
+    }
+
+    private static void setProps(Application app) {
+        String packageName = app.getPackageName();
+
+        if (PRODUCT_NEEDS_MODEL_EDIT && packageName != null) {
+            if (Arrays.asList(packagesToChange).contains(packageName)) {
+                if (DEBUG) {
+                    Log.d(TAG, "Defining props for: " + packageName);
+                }
+                for (Map.Entry<String, Object> prop : propsToChange.entrySet()) {
+                    String key = prop.getKey();
+                    Object value = prop.getValue();
+                    setPropValue(key, value);
+                }
+            }
+            if (Arrays.asList(packagesToChangePixel3XL).contains(packageName)){
+                if (DEBUG){
+                    Log.d(TAG, "Defining props for: " + packageName);
+                }
+                for (Map.Entry<String, Object> prop : propsToChangePixel3XL.entrySet()) {
+                    String key = prop.getKey();
+                    Object value = prop.getValue();
+                    setPropValue(key, value);
+                }
+            }
+            // Set proper indexing fingerprint
+            if (packageName.equals("com.google.android.settings.intelligence")) {
+                setPropValue("FINGERPRINT", Build.DATE);
+            }
+        }
+    }
+
+    private static void setPropValue(String key, Object value) {
+        try {
+            if (DEBUG) {
+                Log.d(TAG, "Defining prop " + key + " to " + value.toString());
+            }
+            Field field = Build.class.getDeclaredField(key);
+            field.setAccessible(true);
+            field.set(null, value);
+            field.setAccessible(false);
+        } catch (NoSuchFieldException | IllegalAccessException e) {
+            Log.e(TAG, "Failed to set prop " + key, e);
+        }
+    }
+
     /**
      * Perform calling of the application's {@link Application#onCreate}
      * method.  The default implementation simply calls through to that method.
-- 
2.30.2

