From 338c8053415716ee9ed31121c9b7a01b94419882 Mon Sep 17 00:00:00 2001
From: Victor Bo <bvoid@yandex.ru>
Date: Sun, 14 Mar 2021 09:43:12 -0400
Subject: [PATCH 191/210] add PixelPropsUtils

  based on
  https://github.com/PixelExperience/frameworks_base/blob/eleven/core/java/com/android/internal/util/custom/PixelPropsUtils.java
  https://github.com/ProtonAOSP/android_frameworks_base/commit/5c023855cb109e9d9d4681d248a997abe7fa5035

Change-Id: Ia80e0bef85880c5ceba92f3694943dd4f4b89111
---
 core/java/com/android/internal/os/Zygote.java |  4 +
 .../internal/util/custom/PixelPropsUtils.java | 85 +++++++++++++++++++
 2 files changed, 89 insertions(+)
 create mode 100644 core/java/com/android/internal/util/custom/PixelPropsUtils.java

diff --git a/core/java/com/android/internal/os/Zygote.java b/core/java/com/android/internal/os/Zygote.java
index a7d9827855a..972ceb9073e 100644
--- a/core/java/com/android/internal/os/Zygote.java
+++ b/core/java/com/android/internal/os/Zygote.java
@@ -47,6 +47,8 @@ import java.io.FileDescriptor;
 import java.io.IOException;
 import java.io.InputStreamReader;
 
+import com.android.internal.util.custom.PixelPropsUtils;
+
 /** @hide */
 public final class Zygote {
     /*
@@ -794,6 +796,8 @@ public final class Zygote {
         } else {
             Log.w(loggingTag, "Unable to set package name.");
         }
+        // Set pixel props
+        PixelPropsUtils.setProps(args.mPackageName);
     }
 
     private static final String USAP_ERROR_PREFIX = "Invalid command to USAP: ";
diff --git a/core/java/com/android/internal/util/custom/PixelPropsUtils.java b/core/java/com/android/internal/util/custom/PixelPropsUtils.java
new file mode 100644
index 00000000000..d1f2b044a7e
--- /dev/null
+++ b/core/java/com/android/internal/util/custom/PixelPropsUtils.java
@@ -0,0 +1,85 @@
+/*
+ * Copyright (C) 2020 The Pixel Experience Project
+ *               2021 CAOS/LiR Treble Projects
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.internal.util.custom;
+
+import android.os.Build;
+import android.os.SystemProperties;
+import android.util.Log;
+
+import java.util.Arrays;
+import java.lang.reflect.Field;
+import java.util.HashMap;
+import java.util.Map;
+
+public class PixelPropsUtils {
+
+    private static final boolean PRODUCT_NEEDS_MODEL_EDIT =
+            SystemProperties.getBoolean("persist.sys.phh.pixelprops", false);
+
+    private static final String TAG = PixelPropsUtils.class.getSimpleName();
+    private static final boolean DEBUG = false;
+
+    private static final Map<String, Object> propsToChange;
+
+    private static final String[] packagesToChange = {
+            "com.google.android.apps.safetyhub",
+            "com.google.android.apps.turbo",
+            "com.google.android.apps.wallpaper",
+            "com.google.android.apps.maps",
+            "com.google.android.gms"
+    };
+
+    static {
+        propsToChange = new HashMap<>();
+        propsToChange.put("BRAND", "google");
+        propsToChange.put("MANUFACTURER", "Google");
+        propsToChange.put("DEVICE", "redfin");
+        propsToChange.put("PRODUCT", "redfin");
+        propsToChange.put("MODEL", "Pixel 5");
+        propsToChange.put("FINGERPRINT", "google/redfin/redfin:11/RQ2A.210305.007/7124944:user/release-keys");
+    }
+
+    public static void setProps(String packageName) {
+        if (PRODUCT_NEEDS_MODEL_EDIT && packageName != null) {
+            if (Arrays.asList(packagesToChange).contains(packageName)) {
+                if (DEBUG) {
+                    Log.d(TAG, "Defining props for: " + packageName);
+                }
+                for (Map.Entry<String, Object> prop : propsToChange.entrySet()) {
+                    String key = prop.getKey();
+                    Object value = prop.getValue();
+                    setPropValue(key, value);
+                }
+            }
+        }
+    }
+
+    private static void setPropValue(String key, Object value) {
+        try {
+            if (DEBUG) {
+                Log.d(TAG, "Defining prop " + key + " to " + value.toString());
+            }
+            Field field = Build.class.getDeclaredField(key);
+            field.setAccessible(true);
+            field.set(null, value);
+            field.setAccessible(false);
+        } catch (NoSuchFieldException | IllegalAccessException e) {
+            Log.e(TAG, "Failed to set prop " + key, e);
+        }
+    }
+}
-- 
2.17.1

